/*******************************************************************************
*
*	MOS 6502 FPGA Processor Archeticture
*
*	Date: 22-12-2-16
*	Yazan Mehyar
*******************************************************************************/

This document specifies the components and their connections ,at a register
transfer level, of the FPGA implementation of the MOS 6502.

================================================================================

	MOS 6502 pin layout

	Power pins not shown. (Irrelevant)

	Total 34 (meaningful) pins.


			-----------------------------
			|							|
			> Clk						|
			|					   Sync >
			< Phi_1						|
			|					  Ready <
			< Phi_2						|
			|						S.O <
			<> Data [7:0]				|
			|						IRQ <
			< Address [15:0]			|
			|						NMI <
			< RnW						|
			|					  RESET <
			|							|
			-----------------------------

================================================================================
PHI_1 & PHI_2

These signals stand for phase 1 and 2 repectively. They occur every clock cycle
in a non-overlapping manner. They enabled latches in the original design, but
more importantly it applied constraints on the address and data bus.

CLK signal:

	-------------			-------------
		PHI_1	|	PHI_2	|	PHI_1	|	PHI_2
				-------------			-----------

The data bus connected to the processor was set to a floating state in PHI_1.
PHI_2 is when data travels in this bidirectional data bus.

Naturally, the address bus is stablised by the end of PHI_1 to allow the memory
to respond by PHI_2. This allowed single cycle read and write on the 6502.


Address register implementation:
-----------------------------
With constraint just mentioned as well as timing constraints applied on the
instruction, the address register will be implemented as a multiplexor followed
by a buffer (D-type ff) if the address should be preserved.

i.e.

===== bus 1 ====|\
				| |
===== bus 2 ====| |=========+====== ADR out
				| |			|
		+=======|/		+---+----+
		|				| Buffer |
		|				+--------+
		+===================+

NOTE:-	not suitable for asynchronous memory if successive write cycles occur
		while the address needs to be preserved.
================================================================================
Datapath Components:
--------------------

Registers:

DIR 	- Data input register
ADRL	- Low byte of the address register
ADRH	- High byte of the address register
PCL 	- Low byte of the program counter
PCH 	- High byte of the program counter
Acc 	- Accumulutor
iX  	- X index register
iY  	- Y index register
SP  	- Stack Pointer
AOR 	- ALU output register


Buses:

iDB 	- Internal Data Bus
SB  	- Special Bus
ADBL	- Address Bus (Low order byte)
ADBH	- Address Bus (High order byte)
PCLB	- PC low byte (always set to ADBL + 1)
PCHB	- PC high byte (always set to ADBH + 1)

================================================================================
Addressing Modes:
-----------------

ZPG 	- Zero Page
ZPGi	- Zero Page indexed
ABS 	- Absolute
ABSi	- Absolute indexed
INDX	- Indirect, X
INDY	- Indirect, Y
SPEC	- Special (Implied)

================================================================================

Timing & Signals:
----------------

NOTE
	AOR and DIR are enabled unless specified o/w.
	All instructions are cycle accurate except for JSR, which takes 5 cycles
	instead of 6.

	T2 ALU CARRY_IN IS ALWAYS '0'
+===========+===============+================+========+========+======+=========+==========+=========+=========+=========+=========+=========+
| PHASE: T2 |      ZPG      |       ABS      |  ZPGi  |  ABSi  | INDX |  INDY   |   PUSH   |  PULL   |   JSR   |   BRK   |   RST   |   RTI   |
+===========+===============+================+========+========+======+=========+==========+=========+=========+=========+=========+=========+
| ENABLES   | -             | PC_EN          | -      | PC_EN  | -    | -       | -        | -       | ~DIR_EN | -       | -       | -       |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| IDB_SEL   | SB            | DIR            | DIR    | DIR    | DIR  | DIR/X   | Acc, PSR | X       | PCH     | PCH     | X       | X       |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| SB_SEL    | Acc, iX, iY   | X              | iX, iY | iX, iY | iX   | X       | X        | X       | X       | X       | X       | X       |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ADBL_SEL  | DIR           | PCL            | PCL    | PCL    | PCL  | DIR     | SP       | SP      | SP      | SP      | SP      | SP      |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ADBH_SEL  | ZPG           | PCH            | PCH    | PCH    | PCH  | ZPG     | STACK    | STACK   | STACK   | STACK   | STACK   | STACK   |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ////////  |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ALU_FUNC  | X             | PASS           | ADD    | ADD    | ADD  | INC     | DEC      | INC     | DEC     | DEC     | INC     | INC     |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ALU_B_sel | X             | iDB            | iDB    | iDB    | iDB  | iDB/ADL | ADL      | ADL     | ADL     | ADL     | ADL     | ADL     |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| ////////  |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| Read (nW) | ~ST           | 1              | 1      | 1      | 1    | 1       | 0        | 1       | 0       | RESET   | 1       | 1       |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+
| Next_T    | RMW? SD1 : T0 | JMP_ABS? T0:T3 | T3     | T3     | T3   | T3      | T0       | T3      | T3      | T3      | T3      | T3      |
+-----------+---------------+----------------+--------+--------+------+---------+----------+---------+---------+---------+---------+---------+

	T3 ALU CARRY_IN IS ALWAYS '0'

+===========+=============+=============+======================+=======+======+=========+=========+========+=======+=======+=========+
| PHASE: T3 |     ABS     |    ZPGi     |       ABSi           | INDX  | INDY | PULL    |  JSR    |  BRK   |  RST  |  RTI  | JMP IND |
+===========+=============+=============+======================+=======+======+=========+=========+========+=======+=======+=========+
| ENABLES   | -           | -           | -                    | -     | -    | ~AOR_EN | ~DIR_EN | -      | -     | -     | -       |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| IDB_SEL   | SB          | SB          | DIR                  | X     | DIR  | X       | PCL     | PCL    | X     | X     | X       |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| SB_SEL    | Acc, iX, iY | Acc, iX, iY | X                    | X     | iY   | X       | X       | X      | X     | X     | X       |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ADBL_SEL  | AOR         | AOR         | COUT? BUFF_:AOR      | AOR   | AOR  | AOR     | AOR     | AOR    | AOR   | AOR   | AOR     |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ADBH_SEL  | DIR         | ZPG         | COUT? BUFF_:DIR      | ZPG   | ZPG  | STACK   | STACK   | STACK  | STACK | STACK | DIR     |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ////////  |                                                                                                                        |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ALU_FUNC  | X           | X           | COUT? INC:PASS       | INC   | ADD  | X       | DEC     | DEC    | INC   | INC   | INC     |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ALU_B_sel | X           | X           | iDB                  | ADL   | iDB  | X       | ADL     | ADL    | ADL   | ADL   | ADL     |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| ////////  |                                                                                                                        |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| Read (nW) | ~ST         | ~ST         | 1                    | 1     | 1    | 1       | 0       |  RESET | 1     | 1     | 1       |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+
| Next_T    | RMW? SD1:T0 | RMW? SD1:T0 | (COUT|ST|RMW)? T4:T0 | T4    | T4   | T0      | T4      | T4     | T4    | T4    | T4      |
+-----------+-------------+-------------+----------------------+-------+------+---------+---------+--------+-------+-------+---------+

	PHASE T4: CARRY_IN DON'T CARE (0)

+===========+=============+======+==================+=======+========+=======+========+=========+
| PHASE: T4 |    ABSi     | INDX |       INDY       |  JSR  |  BRK   |  RST  |  RTI   | JMP IND |
+===========+=============+======+==================+=======+========+=======+========+=========+
| ENABLES   | -           | -    | -                | SP_EN | -      | SP_EN | PSR_EN | -       |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| IDB_SEL   | Acc         | DIR  | DIR              | DIR   | PSR    | DIR   | DIR    | DIR     |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| SB_SEL    | X           | X    | X                | AOR   | X      | AOR   | X      | X       |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ADBL_SEL  | BUFF_BUFF   | AOR  | COUT? BUFF_:AOR  | PCL   | AOR    | AOR   | AOR    | AOR     |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ADBH_SEL  | AOR         | ZPG  | COUT? BUFF_:DIR  | PCH   | STACK  | STACK | STACK  | BUFF    |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ////////  |                                                                                   |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ALU_FUNC  | X           | PASS | COUT? INC:PASS   | PASS  | DEC    | PASS  | INC    | PASS    |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ALU_B_sel | X           | iDB  | iDB              | iDB   | ADL    | iDB   | ADL    | iDB     |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| ////////  |                                                                                   |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| Read (nW) | ~ST         | 1    | 1                | 1     | RESET  | 1     | 1      | 1       |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+
| Next_T    | RMW? SD1:T0 | T5   | (COUT|ST)? T5:T0 | T0    | T5     | T5    | T5     | T0      |
+-----------+-------------+------+------------------+-------+--------+-------+--------+---------+

NOTE
	REMEMBER TO SET THE BREAK FLAG IF CAUSED BY SOFTWARE INTERRUPT
	ALSO REMEMBER TO SET THE INTERRUPT DISABLE FLAG

 ALU_FUNC IS ALWAYS 'PASS'
 ALU_B_sel IS ALWAYS 'iDB'
 CARRY_IN IS DON'T CARE
 SB_SEL IS 'AOR'

+===========+======+======+=============+=======+=======+
| PHASE: T5 | INDX | INDY |     BRK     |  RST  |  RTI  |
+===========+======+======+=============+=======+=======+
| ENABLES   | -    | -    | SP_EN,PC_EN | PC_EN | SP_EN |
+-----------+------+------+-------------+-------+-------+
| IDB_SEL   | Acc  | Acc  | X           | X     | DIR   |
+-----------+------+------+-------------+-------+-------+
| ADBL_SEL  | AOR  | BUFF | VEC         | AOR   | AOR   |
+-----------+------+------+-------------+-------+-------+
| ADBH_SEL  | DIR  | AOR  | VECTOR      | DIR   | STACK |
+-----------+------+------+-------------+-------+-------+
| ////////  |                                           |
+-----------+------+------+-------------+-------+-------+
| Read (nW) | ~ST  | ~ST  | 1           | 1     | 1     |
+-----------+------+------+-------------+-------+-------+
| Next_T    | T0   | T0   | SPECIAL     | T0    | T0    |
+-----------+------+------+-------------+-------+-------+

	ALU_B_SEL IS ALWAYS 'iDB'
	CARRY_IN IS carry flag
	SB_SEL IS ALWAYS 'AOR'

+================+===========+============+======+
| PHASE: SPECIAL |    SD1    |    SD2     | BRK  |
+================+===========+============+======+
| ENABLES        | -         | PSR[NZ(C)] | -    |
+----------------+-----------+------------+------+
| IDB_SEL        | DIR       | SB         | DIR  |
+----------------+-----------+------------+------+
| ADBL_SEL       | BUFF_BUFF | BUFF       | PCL  |
+----------------+-----------+------------+------+
| ADBH_SEL       | BUFF_BUFF | BUFF       | PCH  |
+----------------+-----------+------------+------+
| ////////                                       |
+----------------+-----------+------------+------+
| ALU_FUNC       | USE_T0    | X          | PASS |
+----------------+-----------+------------+------+
| ////////                                       |
+----------------+-----------+------------+------+
| Read (nW)      | 0         | 0          | 1    |
+----------------+-----------+------------+------+
| Next_T         | SD2       | T0         | T0   |
+----------------+-----------+------------+------+

NOTE BRANCHES ARE DEALT WITH IN A VERY SPECIAL WAY.

+=====================+=============+==============+========+
| PHASE: BRANCH (T0)  |     T0      |   BCC(T0)    | BX(T0) |
+=====================+=============+==============+========+
| ENABLES             | PC_EN       | PC_EN        | PC_EN  |
+---------------------+-------------+--------------+--------+
| IDB_SEL             | DIR         | PCH          | X      |
+---------------------+-------------+--------------+--------+
| SB_SEL              | iDB         | X            | X      |
+---------------------+-------------+--------------+--------+
| ADBL_SEL            | PCL         | XP?BUFF_:AOR | BUFF   |
+---------------------+-------------+--------------+--------+
| ADBH_SEL            | PCH         | BUFF_BUFF    | AOR    |
+---------------------+-------------+--------------+--------+
| ////////                                                  |
+---------------------+-------------+--------------+--------+
| ALU_FUNC            | ADD         | iDB7?DEC:INC | X      |
+---------------------+-------------+--------------+--------+
| ALU_B_sel           | ADL         | iDB          | X      |
+---------------------+-------------+--------------+--------+
| Carry_in            | 0           | X            | X      |
+---------------------+-------------+--------------+--------+
| ////////                                                  |
+---------------------+-------------+--------------+--------+
| Read (nW)           | 1           | 1            | 1      |
+---------------------+-------------+--------------+--------+
| Next_T              | CC? T0:T1   | XP? T0:T1    | T1     |
+---------------------+-------------+--------------+--------+

NOTE
	ALL FLAGS ARE PRESERVED UNLESS SPECIFIED O/W.
	T0 & T1 ARE ALWAYS READ
	ALU_B_SEL IS ALWAYS 'iDB'
	PC is always enabled

CATEGORIES:

- STORE/RMW
- ACC
- ARITH_LOGIC
- CONTROL
- STACK
- INTERNAL (REGISTER TO REGISTER EXCEPT RMW ACCUMULATOR)
- FLAGS
- BIT (SPECIAL)

+===========+=======+=============+==========================+==============+========================+==============+==========+===========+
| PHASE: T0 | STORE |     ACC     |        ARTH_LOGIC        |   CONTROL    |         STACK          |   INTERNAL   | FLAGS    |    BIT    |
+===========+=======+=============+==========================+==============+========================+==============+==========+===========+
| ENABLES   | -     | -           | -                        | -            | SP_EN, (PSR_EN)        | -            | FLAG_EN  | PSR_NV_EN |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| IDB_SEL   | X     | Acc         | DIR                      | X            | DIR                    | SB           | X        | DIR       |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| SB_SEL    | X     | X           | Acc/iX/iY                | X            | AOR                    | Acc/iX/iY/SP | X        | X         |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| ADBL_SEL  | PCL   | PCL         | PCL                      | RTS? PCL:AOR | PCL                    | PCL          | PCL      | PCL       |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| ADBH_SEL  | PCH   | PCH         | PCH                      | RTS? PCH:DIR | PCH                    | PCH          | PCH      | PCH       |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| ////////  |       |             |                          |              |                        |              |          |           |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| ALU_FUNC  | X     | SHIFT (L/R) | ADD/SUB/AND/ORR/EOR/PASS | X            | PASS                   | PASS/INC/DEC | X        | AND       |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| Carry_in  | X     | C_FLAG      | COMPARE? 1:C_FLAG        | X            | X                      | X            | X        | X         |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| ////////  |       |             |                          |              |                        |              |          |           |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+
| FLAGS     | -     | -           | -                        | -            | (-/PSR_LOAD)           | -            | IR5_LOAD | PSR_LOAD  |
+-----------+-------+-------------+--------------------------+--------------+------------------------+--------------+----------+-----------+


NOTE
	THE T1 PHASE IS FOLLOWED BY T0 OR T2 DEPENDING ON THE SIGNAL 'TWO_CYCLE'
	THE PC IS ENABLED UNLESS THE 'ONE_BYTE' SIGNAL IS SET
	*THE IDB_SEL IS ALWAYS SET TO 'SB' IN THIS PHASE (WRITEBACK PHASE)
	*THE ADBL AND ADBH ARE ALWAYS SET TO 'PCL' & 'PCH' RESPECTIVELY
	*THE SB IS ALWAYS SET TO 'AOR'

- INERT: [STORE, CONTROL, FLAGS, BIT]: NOTHING ENABLED (EXCEPT DIR & AOR)

+===========+===============+===============+=======================+================+=====================+
| PHASE: T1 |     INERT     |      RMW      |      ARTH_LOGIC       |     STACK      |       INTERNAL      |
+===========+===============+===============+=======================+================+=====================+
| ENABLES   | -             | Acc? Acc:-    | Acc/iX/iY             | PLA? Acc:-     | Acc/iX/iY/SP        |
+-----------+---------------+---------------+-----------------------+----------------+---------------------+
| V-FLAG    | pV            | pV            | (SBC|ADC)? VOUT:pV    | pV             | pV                  |
+-----------+---------------+---------------+-----------------------+----------------+---------------------+
| C-FLAG    | pC            | Acc? COUT:pC  | (SBC|ADC|CP)? COUT:pC | pC             | pC                  |
+-----------+---------------+---------------+-----------------------+----------------+---------------------+
| N-FLAG    | pN            | Acc? iDB7:pN  | iDB7                  | PLA? iDB7:pN   | (TXS|NOP)? pN:iDB7  |
+-----------+---------------+---------------+-----------------------+----------------+---------------------+
| Z-FLAG    | BIT? ~|iDB:pZ | Acc? ~|iDB:pZ | ~|iDB                 | PLA? ~|iDB:pZ  | (TXS|NOP)? pZ:~|iDB |
+-----------+---------------+---------------+-----------------------+----------------+---------------------+



/******************************************************************************/
	DECODE	|
/***********/


CATEGORY   STORE   RMW   ARTH_LOGIC   CONTROL   STACK   INTERNAL   FLAGS   BIT
---------- ------- ----- ------------ --------- ------- ---------- ------- -----
		   STA     ASL   ADC          BCC       PHA     DEX        CLC     BIT
		   STX     DEC   AND          BCS       PHP     DEY        CLD
		   STY     INC   CMP          BEQ       PLA     INX        CLI
				   LSR   CPX          BMI       PLP     INY        CLV
				   ROL   CPY          BNE               TAX        SEC
				   ROR   EOR          BPL               TAY        SED
						 LDA          BRK               TSX        SEI
						 LDX          BVC               TXA
						 LDY          BVS               TXS
						 ORA          JMP               TYA
						 SBC          JSR               NOP
									  RTI
									  RTS


+==============+======================+===============================+======================================+==============+
| CATEGORY     | STORE                | RMW                           | ARITHMETIC_LOGIC                     |              |
+==============+======================+===============================+======================================+==============+
| BINARY REGEX | 100X_X(X01|1X0)      | (~10)XX_X110|ACC              | (~100)X_XX01|IMM|101X_X1X0|11X0_X100 |              |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
|              | CONTROL              | STACK                         | INTERNAL                             | FLAGS        |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| BINARY REGEX | BRANCH|0XX0_0000|JMP | 0XX0_1000                     | 1XXX_10X0 & ~FLAGS                   | (~101)1_1000 |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| ////////     |                      |                               |                                      |              |
+==============+======================+===============================+======================================+==============+
| ADDR MODE    | ZPG                  | ZPGi                          | ABS                                  | ABSi         |
+==============+======================+===============================+======================================+==============+
| BINARY REGEX | XXX0_01XX            | XXX1_01XX                     | XXX0_11XX                            | XXX1_1XXX    |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
|              | INDX                 | INDY                          | IMM                                  | ACC          |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| BINARY REGEX | XXX0_0001            | XXX1_0001                     | XXX0_1001|1XX0_00X0                  | 0XXX_1010    |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| ////////     |                      |                               |                                      |              |
+==============+======================+===============================+======================================+==============+
| SPECIAL      | BRANCH               | RTS                           | RTI                                  | JSR          |
+==============+======================+===============================+======================================+==============+
| BINARY REGEX | XXX1_0000            | 0110_0000                     | 0100_0000                            | 0010_0000    |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
|              | BRK                  | JMP_INDIRECT                  | JMP_ABS                              | BIT          |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| BINARY REGEX | 0000_0000            | 0110_1100                     | 0100_1100                            | 0010_X100    |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+
| ////////     |                      |                               |                                      |              |
+==============+======================+===============================+======================================+==============+
| MISC         | ONE_BYTE             | TWO_CYCLE                     |                                      |              |
+==============+==========================+===============================+==================================+==============+
| BINARY REGEX | XXXX_10X0            | IMM|BRANCH|ONE_BYTE&~STACK    |                                      |              |
+--------------+----------------------+-------------------------------+--------------------------------------+--------------+

/******************************************************************************/
	INTERRUPTS	|
/**************/
NOTE THE INTERRUPTS ARE ACTIVE LOW.

LEVEL-SENSITIVE INTERRUPT
-------------------------

THE IRQ LINE WILL BE CONNECTED TO A SINGLE FF WHICH WILL BE POLLED AT T0.
THE REGISTER IS ENABLED AT ALL T-STATES BUT T0. WHENEVER AN INTERRUPT IS
DETECTED THE REGISTER IS PULLED LOW. THE SYSTEM IS THEN NOTIFIED AT T0.
ONCE THE SOURCE OF INTERRUPT HAS BEEN DEALT WITH, THE IRQ LINE SHOULD BE PULLED
HIGH AND CONSEQUENTLY THE REGISTER ON THE NEXT CYCLE (NOT T0).

IRQ ------| R1 |-----| R2 |---- TO PRE_IR
				  |
				  ----NOT------ NAND(T0) ---- TO PC

R1 IS ENABLED AT '~T0' WHILE R2 IS ENABLED AT 'T0'.


EDGE-SENSITIVE INTERRUPT
------------------------

BY DEFINITION THE NMI LINE SHOULD TRIGGER AN INTERRUPT WHENEVER IT TRANSITIONS
FROM HIGH TO LOW. THE PROCESSOR IS GIVEN 2 CLOCK CYCLES TO RECOGNISE THE
REQUEST.


NMI --------| R1 |-------------| R2 |
			  |					  |
			  ---NOT---NAND--------
			  			|
						-------| R3 |----| R4 |------ TO PRE_IR
									  |
									  ---------NAND(T0)---- TO PC

R1 & R2 ARE ALWAYS ENABLED
R3 IS ENABLED IF ITS OUTPUT IS HIGH OR T0 & T_en IS HIGH
R4 IS ENABLED AT T0
